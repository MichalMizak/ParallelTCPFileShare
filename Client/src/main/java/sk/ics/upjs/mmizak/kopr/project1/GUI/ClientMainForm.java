package sk.ics.upjs.mmizak.kopr.project1.GUI;

import configuration.ClientServerConfiguration;
import core.FinalTest;
import sk.ics.upjs.mmizak.kopr.project1.GUI.enums.DownloadState;
import sk.ics.upjs.mmizak.kopr.project1.core.Client;
import sk.ics.upjs.mmizak.kopr.project1.core.ProgressInformer;
import entities.Progress;
import utilities.ProgressParser;

import javax.swing.*;
import java.awt.event.ActionEvent;

import static configuration.ClientServerConfiguration.CHUNK_SIZE;

public class ClientMainForm extends JFrame {

    private ProgressInformer progressInformer;
    private DownloadState downloadState;
    private Client client;
    private ProgressBarSwingWorker progressBarSwingWorker;

    public ClientMainForm() {
        init();
    }

    /**
     * General initiation
     */
    private void init() {
        initComponents();
        initLookAndFeel();
        setTitle("Client");

        initProgress();

        client = new Client();
    }

    /**
     * GENERATED NETBEANS CODE
     * <p>
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        threadCountTextField = new javax.swing.JTextField();
        downloadButton = new javax.swing.JButton();
        downloadProgressBar = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Thread count:");

        threadCountTextField.setText("1");

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Progress:");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(18, 18, 18)
                                                .addComponent(threadCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(cancelButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(downloadButton))
                                                        .addComponent(downloadProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addContainerGap())))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(threadCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(downloadButton)
                                        .addComponent(cancelButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(downloadProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>

    //<editor-fold desc="Progress initiation">

    /**
     * Check if there is any pending previous download, init fields
     * Ideally should be startState outside GUI, but it's a very lighweight operation
     */
    private void initProgress() {
        Progress progress = ProgressParser.readProgress();

        boolean isDownloadFinished = progress.isDownloadFinished();

        ProgressInformer progressInformer = new ProgressInformer(progress);

        progressBarSwingWorker = new ProgressBarSwingWorker(progressInformer, downloadProgressBar, cancelButton);
        progressBarSwingWorker.execute();

        if (!isDownloadFinished) {
            pausedGUI();
        } else {
            startGUI();
        }
    }
    //</editor-fold>

    // <editor-fold defaultstate="collapsed" desc="GUI state change methods">
    private void pausedGUI() {
        cancelButton.setText("Reset");
        cancelButton.setEnabled(true);
        downloadButton.setText("Continue");
        downloadButton.setEnabled(true);
        downloadState = DownloadState.PAUSED;
    }

    private void pendingGUI() {
        cancelButton.setText("Cancel");
        cancelButton.setEnabled(true);
        downloadButton.setText("Downloading");
        downloadButton.setEnabled(false);
        downloadState = DownloadState.PENDING;
    }

    private void startGUI() {
        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        downloadButton.setText("Download");
        downloadButton.setEnabled(true);
        downloadState = DownloadState.START;
    }

    private void doneGUI() {
        cancelButton.setText("Reset");
        cancelButton.setEnabled(true);
        downloadButton.setText("Done");
        downloadButton.setEnabled(false);
        downloadState = DownloadState.DONE;
    }
    // </editor-fold>

    //<editor-fold desc="Button action handling">
    private void cancelButtonActionPerformed(ActionEvent evt) {
        switch (downloadState) {
            case START: {
                break;
            }
            case DONE: {
                startState();
                break;
            }
            case PENDING: {
                if (progressInformer.getProgressPercents() == 100) {
                    doneState();
                    break;
                }
                pauseState();
                break;
            }
            case PAUSED: {
                startState();
                break;
            }
        }
    }

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {
        switch (downloadState) {
            case PENDING: {
                break;
            }
            case DONE: {
                break;
            }
            case START: {
                initDownload();
                break;
            }
            case PAUSED: {
                // TODO: download should move to another thread for the best performance
                continueDownload();
                break;
            }
        }
    }
    //</editor-fold>

    //<editor-fold desc="State changers">
    private void continueDownload() {
        progressInformer = client.continueDownload();
        downloadState = DownloadState.PENDING;

        progressBarSwingWorker.setProgressInformer(progressInformer);

        pendingGUI();
    }

    private void initDownload() {
        String threadCountString = threadCountTextField.getText().trim();
        Integer threadCount = Integer.parseInt(threadCountString);

        // TODO: download needs to move to another thread for the best performance

        progressInformer = client.newDownload(threadCount);
        downloadState = DownloadState.PENDING;

        progressBarSwingWorker.setProgressInformer(progressInformer);

        pendingGUI();
    }

    private void pauseState() {
        progressBarSwingWorker.pausedState();
        client.pause();
        pausedGUI();
    }

    private void startState() {
        progressBarSwingWorker.resetState();
        startGUI();
        ProgressParser.flushProgress();
    }

    private void doneState() {
        doneGUI();
        progressBarSwingWorker.doneState();
        FinalTest.compare(CHUNK_SIZE);
    }
    //</editor-fold>

    /**
     * GENERATED NETBEANS CODE
     */
    public void initLookAndFeel() {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Windows (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sk.ics.upjs.mmizak.kopr.project1.core.Client.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sk.ics.upjs.mmizak.kopr.project1.core.Client.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sk.ics.upjs.mmizak.kopr.project1.core.Client.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sk.ics.upjs.mmizak.kopr.project1.core.Client.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    }

    // Variables declaration - do not modify
    private javax.swing.JButton downloadButton;
    private JButton cancelButton;
    private javax.swing.JTextField threadCountTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JProgressBar downloadProgressBar;
    // End of variables declaration
}
